/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.custom.IntOrString;
import io.argoproj.models.V1alpha1MetricProvider;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Metric defines a metric in which to perform analysis
 */
@ApiModel(description = "Metric defines a metric in which to perform analysis")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-19T21:57:47.017Z[Etc/UTC]")
public class V1alpha1Metric {
  public static final String SERIALIZED_NAME_CONSECUTIVE_ERROR_LIMIT = "consecutiveErrorLimit";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_ERROR_LIMIT)
  private IntOrString consecutiveErrorLimit = null;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private IntOrString count = null;

  public static final String SERIALIZED_NAME_FAILURE_CONDITION = "failureCondition";
  @SerializedName(SERIALIZED_NAME_FAILURE_CONDITION)
  private String failureCondition;

  public static final String SERIALIZED_NAME_FAILURE_LIMIT = "failureLimit";
  @SerializedName(SERIALIZED_NAME_FAILURE_LIMIT)
  private IntOrString failureLimit = null;

  public static final String SERIALIZED_NAME_INCONCLUSIVE_LIMIT = "inconclusiveLimit";
  @SerializedName(SERIALIZED_NAME_INCONCLUSIVE_LIMIT)
  private IntOrString inconclusiveLimit = null;

  public static final String SERIALIZED_NAME_INITIAL_DELAY = "initialDelay";
  @SerializedName(SERIALIZED_NAME_INITIAL_DELAY)
  private String initialDelay;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private V1alpha1MetricProvider provider;

  public static final String SERIALIZED_NAME_SUCCESS_CONDITION = "successCondition";
  @SerializedName(SERIALIZED_NAME_SUCCESS_CONDITION)
  private String successCondition;


  public V1alpha1Metric consecutiveErrorLimit(IntOrString consecutiveErrorLimit) {
    
    this.consecutiveErrorLimit = consecutiveErrorLimit;
    return this;
  }

   /**
   * Get consecutiveErrorLimit
   * @return consecutiveErrorLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IntOrString getConsecutiveErrorLimit() {
    return consecutiveErrorLimit;
  }


  public void setConsecutiveErrorLimit(IntOrString consecutiveErrorLimit) {
    this.consecutiveErrorLimit = consecutiveErrorLimit;
  }


  public V1alpha1Metric count(IntOrString count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IntOrString getCount() {
    return count;
  }


  public void setCount(IntOrString count) {
    this.count = count;
  }


  public V1alpha1Metric failureCondition(String failureCondition) {
    
    this.failureCondition = failureCondition;
    return this;
  }

   /**
   * FailureCondition is an expression which determines if a measurement is considered failed If both success and failure conditions are specified, and the measurement does not fall into either condition, the measurement is considered Inconclusive
   * @return failureCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FailureCondition is an expression which determines if a measurement is considered failed If both success and failure conditions are specified, and the measurement does not fall into either condition, the measurement is considered Inconclusive")

  public String getFailureCondition() {
    return failureCondition;
  }


  public void setFailureCondition(String failureCondition) {
    this.failureCondition = failureCondition;
  }


  public V1alpha1Metric failureLimit(IntOrString failureLimit) {
    
    this.failureLimit = failureLimit;
    return this;
  }

   /**
   * Get failureLimit
   * @return failureLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IntOrString getFailureLimit() {
    return failureLimit;
  }


  public void setFailureLimit(IntOrString failureLimit) {
    this.failureLimit = failureLimit;
  }


  public V1alpha1Metric inconclusiveLimit(IntOrString inconclusiveLimit) {
    
    this.inconclusiveLimit = inconclusiveLimit;
    return this;
  }

   /**
   * Get inconclusiveLimit
   * @return inconclusiveLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IntOrString getInconclusiveLimit() {
    return inconclusiveLimit;
  }


  public void setInconclusiveLimit(IntOrString inconclusiveLimit) {
    this.inconclusiveLimit = inconclusiveLimit;
  }


  public V1alpha1Metric initialDelay(String initialDelay) {
    
    this.initialDelay = initialDelay;
    return this;
  }

   /**
   * InitialDelay how long the AnalysisRun should wait before starting this metric
   * @return initialDelay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "InitialDelay how long the AnalysisRun should wait before starting this metric")

  public String getInitialDelay() {
    return initialDelay;
  }


  public void setInitialDelay(String initialDelay) {
    this.initialDelay = initialDelay;
  }


  public V1alpha1Metric interval(String interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Interval defines an interval string (e.g. 30s, 5m, 1h) between each measurement. If omitted, will perform a single measurement
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interval defines an interval string (e.g. 30s, 5m, 1h) between each measurement. If omitted, will perform a single measurement")

  public String getInterval() {
    return interval;
  }


  public void setInterval(String interval) {
    this.interval = interval;
  }


  public V1alpha1Metric name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name is the name of the metric
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name is the name of the metric")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha1Metric provider(V1alpha1MetricProvider provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @ApiModelProperty(required = true, value = "")

  public V1alpha1MetricProvider getProvider() {
    return provider;
  }


  public void setProvider(V1alpha1MetricProvider provider) {
    this.provider = provider;
  }


  public V1alpha1Metric successCondition(String successCondition) {
    
    this.successCondition = successCondition;
    return this;
  }

   /**
   * SuccessCondition is an expression which determines if a measurement is considered successful Expression is a goevaluate expression. The keyword &#x60;result&#x60; is a variable reference to the value of measurement. Results can be both structured data or primitive. Examples:   result &gt; 10   (result.requests_made * result.requests_succeeded / 100) &gt;&#x3D; 90
   * @return successCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SuccessCondition is an expression which determines if a measurement is considered successful Expression is a goevaluate expression. The keyword `result` is a variable reference to the value of measurement. Results can be both structured data or primitive. Examples:   result > 10   (result.requests_made * result.requests_succeeded / 100) >= 90")

  public String getSuccessCondition() {
    return successCondition;
  }


  public void setSuccessCondition(String successCondition) {
    this.successCondition = successCondition;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1Metric v1alpha1Metric = (V1alpha1Metric) o;
    return Objects.equals(this.consecutiveErrorLimit, v1alpha1Metric.consecutiveErrorLimit) &&
        Objects.equals(this.count, v1alpha1Metric.count) &&
        Objects.equals(this.failureCondition, v1alpha1Metric.failureCondition) &&
        Objects.equals(this.failureLimit, v1alpha1Metric.failureLimit) &&
        Objects.equals(this.inconclusiveLimit, v1alpha1Metric.inconclusiveLimit) &&
        Objects.equals(this.initialDelay, v1alpha1Metric.initialDelay) &&
        Objects.equals(this.interval, v1alpha1Metric.interval) &&
        Objects.equals(this.name, v1alpha1Metric.name) &&
        Objects.equals(this.provider, v1alpha1Metric.provider) &&
        Objects.equals(this.successCondition, v1alpha1Metric.successCondition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consecutiveErrorLimit, count, failureCondition, failureLimit, inconclusiveLimit, initialDelay, interval, name, provider, successCondition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1Metric {\n");
    sb.append("    consecutiveErrorLimit: ").append(toIndentedString(consecutiveErrorLimit)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    failureCondition: ").append(toIndentedString(failureCondition)).append("\n");
    sb.append("    failureLimit: ").append(toIndentedString(failureLimit)).append("\n");
    sb.append("    inconclusiveLimit: ").append(toIndentedString(inconclusiveLimit)).append("\n");
    sb.append("    initialDelay: ").append(toIndentedString(initialDelay)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    successCondition: ").append(toIndentedString(successCondition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

