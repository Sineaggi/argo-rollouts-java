/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.models.V1alpha1StickinessConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ALBTrafficRouting configuration for ALB ingress controller to control traffic routing
 */
@ApiModel(description = "ALBTrafficRouting configuration for ALB ingress controller to control traffic routing")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-19T21:57:47.017Z[Etc/UTC]")
public class V1alpha1ALBTrafficRouting {
  public static final String SERIALIZED_NAME_ANNOTATION_PREFIX = "annotationPrefix";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_PREFIX)
  private String annotationPrefix;

  public static final String SERIALIZED_NAME_INGRESS = "ingress";
  @SerializedName(SERIALIZED_NAME_INGRESS)
  private String ingress = "";

  public static final String SERIALIZED_NAME_ROOT_SERVICE = "rootService";
  @SerializedName(SERIALIZED_NAME_ROOT_SERVICE)
  private String rootService;

  public static final String SERIALIZED_NAME_SERVICE_PORT = "servicePort";
  @SerializedName(SERIALIZED_NAME_SERVICE_PORT)
  private Integer servicePort = 0;

  public static final String SERIALIZED_NAME_STICKINESS_CONFIG = "stickinessConfig";
  @SerializedName(SERIALIZED_NAME_STICKINESS_CONFIG)
  private V1alpha1StickinessConfig stickinessConfig;


  public V1alpha1ALBTrafficRouting annotationPrefix(String annotationPrefix) {
    
    this.annotationPrefix = annotationPrefix;
    return this;
  }

   /**
   * AnnotationPrefix has to match the configured annotation prefix on the alb ingress controller
   * @return annotationPrefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AnnotationPrefix has to match the configured annotation prefix on the alb ingress controller")

  public String getAnnotationPrefix() {
    return annotationPrefix;
  }


  public void setAnnotationPrefix(String annotationPrefix) {
    this.annotationPrefix = annotationPrefix;
  }


  public V1alpha1ALBTrafficRouting ingress(String ingress) {
    
    this.ingress = ingress;
    return this;
  }

   /**
   * Ingress refers to the name of an &#x60;Ingress&#x60; resource in the same namespace as the &#x60;Rollout&#x60;
   * @return ingress
  **/
  @ApiModelProperty(required = true, value = "Ingress refers to the name of an `Ingress` resource in the same namespace as the `Rollout`")

  public String getIngress() {
    return ingress;
  }


  public void setIngress(String ingress) {
    this.ingress = ingress;
  }


  public V1alpha1ALBTrafficRouting rootService(String rootService) {
    
    this.rootService = rootService;
    return this;
  }

   /**
   * RootService references the service in the ingress to the controller should add the action to
   * @return rootService
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RootService references the service in the ingress to the controller should add the action to")

  public String getRootService() {
    return rootService;
  }


  public void setRootService(String rootService) {
    this.rootService = rootService;
  }


  public V1alpha1ALBTrafficRouting servicePort(Integer servicePort) {
    
    this.servicePort = servicePort;
    return this;
  }

   /**
   * ServicePort refers to the port that the Ingress action should route traffic to
   * @return servicePort
  **/
  @ApiModelProperty(required = true, value = "ServicePort refers to the port that the Ingress action should route traffic to")

  public Integer getServicePort() {
    return servicePort;
  }


  public void setServicePort(Integer servicePort) {
    this.servicePort = servicePort;
  }


  public V1alpha1ALBTrafficRouting stickinessConfig(V1alpha1StickinessConfig stickinessConfig) {
    
    this.stickinessConfig = stickinessConfig;
    return this;
  }

   /**
   * Get stickinessConfig
   * @return stickinessConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha1StickinessConfig getStickinessConfig() {
    return stickinessConfig;
  }


  public void setStickinessConfig(V1alpha1StickinessConfig stickinessConfig) {
    this.stickinessConfig = stickinessConfig;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha1ALBTrafficRouting v1alpha1ALBTrafficRouting = (V1alpha1ALBTrafficRouting) o;
    return Objects.equals(this.annotationPrefix, v1alpha1ALBTrafficRouting.annotationPrefix) &&
        Objects.equals(this.ingress, v1alpha1ALBTrafficRouting.ingress) &&
        Objects.equals(this.rootService, v1alpha1ALBTrafficRouting.rootService) &&
        Objects.equals(this.servicePort, v1alpha1ALBTrafficRouting.servicePort) &&
        Objects.equals(this.stickinessConfig, v1alpha1ALBTrafficRouting.stickinessConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationPrefix, ingress, rootService, servicePort, stickinessConfig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha1ALBTrafficRouting {\n");
    sb.append("    annotationPrefix: ").append(toIndentedString(annotationPrefix)).append("\n");
    sb.append("    ingress: ").append(toIndentedString(ingress)).append("\n");
    sb.append("    rootService: ").append(toIndentedString(rootService)).append("\n");
    sb.append("    servicePort: ").append(toIndentedString(servicePort)).append("\n");
    sb.append("    stickinessConfig: ").append(toIndentedString(stickinessConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

